@use "sass:color";
@use "sass:meta";

@function to-rgb($color, $method: local-minde) {
  //noinspection CssInvalidFunction
  @return color.to-gamut(color.to-space($color, rgb),$method: $method)
}

@function red($color) {
  @if(meta.function-exists("to-space", color)) {
    //noinspection CssInvalidFunction
    @return color.channel(to-rgb($color), "red");
  } @else {
    @return color.red($color);
  }
}

@function green($color) {
  @if(meta.function-exists("to-space", color)) {
    //noinspection CssInvalidFunction
    @return color.channel(to-rgb($color), "green");
  } @else {
    @return color.green($color);
  }
}

@function blue($color) {
  @if(function-exists("to-space", color)) {
    //noinspection CssInvalidFunction
    @return color.channel(to-rgb($color), "blue");
  } @else {
    @return color.blue($color);
  }
}

@function hue($color) {
  @if meta.function-exists('channel', color) {
    @return color.channel($color, "hue", $space: hsl);
  } @else {
    @return color.hue($color);
  }
}

@function saturation($color) {
  @if meta.function-exists("channel", "color") {
    @return color.channel($color, "saturation", $space: hsl);
  } @else {
    @return color.saturation($color);
  }
}

@function lightness($color) {
  @if meta.function-exists("channel", "color") {
    @return color.channel($color, "lightness", $space: hsl);
  } @else {
    @return color.lightness($color);
  }
}

@function rgb($color) {
  @return red($color) green($color) blue($color);
}




