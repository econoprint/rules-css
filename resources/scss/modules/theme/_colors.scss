@use "sass:map";
@use "sass:math";
@use "sass:color";
@use "sass:string";
@use "../../tokens/config/color" as base;
@use "../palette/palette";
@use "neutrals";
@use "bg";

$major: palette.generate(base.$a1);
$minor: palette.generate(base.$a2);
$feature: palette.generate(base.$a3);
$danger: palette.generate(base.$danger);
$success: palette.generate(base.$success);
$warning: palette.generate(base.$warning);
$default: palette.generate(base.$default);
$surface: if(base.$surface, palette.generate(base.$surface), null);
$neutral: if(base.$neutral, palette.generate(base.$neutral), null);

@function tone($name, $tone) {
  $quoted: string.quote($name);

  @if $quoted == "a1" {
    @return major($tone);
  } @else if $quoted == "a2" {
    @return minor($tone);
  } @else if $quoted == "a3" {
    @return feature($tone);
  } @else if $quoted == "danger" {
    @return danger($tone);
  } @else if $quoted == "warning" {
    @return warning($tone);
  } @else if $quoted == "success" {
    @return success($tone)
  }

  @if $quoted == "major" {
    @return major($tone);
  } @else if $quoted == "minor" {
    @return minor($tone);
  } @else if $quoted == "feature" {
    @return feature($tone);
  } @else if $quoted == "danger" {
    @return danger($tone);
  } @else if $quoted == "warning" {
    @return warning($tone);
  } @else if $quoted == "success" {
    @return success($tone)
  } @else if $quoted == "default" {
    @return default($tone);
  } @else if $quoted == "bg" {
    @return bg($tone)
  } @else if $quoted == "neutral" {
    @return neutral($tone);
  }
}

@function major($tone) {
  @return map.get($major, string.quote(#{$tone}));
}

@function minor($tone) {
  @return map.get($minor, string.quote(#{$tone}));
}

@function feature($tone) {
  @return map.get($feature, string.quote(#{$tone}));
}

@function danger($tone) {
  @return map.get($danger, string.quote(#{$tone}));
}

@function danger($tone) {
  @return map.get($danger, string.quote(#{$tone}));
}

@function warning($tone) {
  @return map.get($warning, string.quote(#{$tone}));
}

@function success($tone) {
  @return map.get($success, string.quote(#{$tone}));
}

@function default($tone) {
  @return map.get($default, string.quote(#{$tone}));
}

@function bg($tone) {
  @return bg.a1($tone);
}

@function neutral($tone) {
  @return neutrals.a1($tone);
}

@function tint($foreground, $percent-opacity) {
  $tint-alpha: (1 - math.div($percent-opacity, 100%)) * -1;

  @return color.adjust($foreground, $alpha: $tint-alpha);
}