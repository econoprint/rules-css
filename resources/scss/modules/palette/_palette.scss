@use "sass:color";
@use "sass:math";
@use "sass:map";
@use "sass:list";
@use "../../tokens/reference" as ref;

$palettes: () !default;

@function generate($base) {
  $output: ();
  $base-10: color.scale($color: $base, $lightness: -20%);
  $base-10: color.adjust($base-10, $saturation: -15%);
  $output: ("0": black, "10": $base-10);

  @each $key in (10,20,25,30,40,50,60,70,80,90,95,98,99) {
    $scale: math.percentage(math.div($key, 100));
    @if $key < 80 {
      $scale: math.percentage(math.div($key * .9, 100));
    }
    @if $key < 20 {
      $scale: math.percentage(math.div($key * 1.2, 100));
    }
    //$shade: color.scale($color: $base-10, $lightness: $scale);
    $shade: color.change($color: $base-10, $lightness: $scale);
    $output: map.set($output, quote(#{$key}), $shade);
  }

  $output: map.set($output, "100", white);

  @return $output;
}

@function tone($name, $tone) {
  $shade-name: quote($name);
  $shade-tone: quote(#{$tone});

  @return map.get($palettes,$shade-name,$shade-tone);
}

@function tint($foreground, $background, $percent-opacity) {
  $tint-alpha: (1 - math.div($percent-opacity, 100%)) * -1;
  $tint: color.adjust($foreground, $alpha: $tint-alpha);
  $alpha: 1 - math.div($percent-opacity, 100%);

  @if ($background == transparent) {
    @return rgba($tint, color.opacity($tint) * $alpha);
  } @else {
    @return color.mix(rgba($tint, 1), rgba($background, 1), 100 * color.opacity($tint) * $alpha);
  }
}

@function disabled($color, $opacity) {
  $r: red($color);
  $g: green($color);
  $b: blue($color);

  @return rgba($r,$g,$b,$opacity);
}
