@use "sass:color";
@use "sass:math";
@use "sass:map";
@use "sass:list";
@use "sass:string";
@use "material-foundation/libmonet/libmonet.scss" as hct;
@use "../../tokens/config/features";

$palettes: () !default;

@function generate($base, $adjust: -1) {
  $output: ();
  $steps: (10,20,25,30,40,50,60,70,80,90,95,98,99);
  @if features.$hct {
    // Generate Colors based on HCT
    $base-hct: hct.hct_from_color($base);
    $h: list.nth($base-hct, 1);
    $c: list.nth($base-hct, 2);
    $base-10: hct.hct($h, $c, 10);
    $output: ("0": hct.hct($h, $c, 0), "10": $base-10);

    @each $key in $steps {
      $shade: hct.hct($h, $c, $key + $adjust);
      $output: map.set($output, string.quote(#{$key}), $shade);
    }

    $output: map.set($output, "100", hct.hct($h, $c, 100));
  } @else {
    // Generate Colors based on HSL
    $base: color.adjust($base, $lightness: -5%); // Just a little darker
    $h: math.round(color.hue($base));
    $s: math.round(color.saturation($base) * 1.05); // Increase saturation a little
    $l: color.lightness($base);
    $base-10: hsl($h, $s, 10%);
    $output: ("0": #000, "10": $base-10);

    @each $key in $steps {
      $scale: math.percentage(math.div($key, 100));
      $shade: hsl($h, $s, $scale);
      $output: map.set($output, string.quote(#{$key}), $shade);
    }

    $output: map.set($output, "100", #fff);
  }

  @return $output;
}

@function tone($name, $tone) {
  $shade-name: string.quote($name);
  $shade-tone: string.quote(#{$tone});

  @return map.get($palettes,$shade-name,$shade-tone);
}

@function tint($foreground, $background, $percent-opacity) {
  $tint-alpha: (1 - math.div($percent-opacity, 100%)) * -1;
  $tint: color.adjust($foreground, $alpha: $tint-alpha);
  $alpha: 1 - math.div($percent-opacity, 100%);

  @if ($background == transparent) {
    @return rgba($tint, color.opacity($tint) * $alpha);
  } @else {
    @return color.mix(rgba($tint, 1), rgba($background, 1), 100 * color.opacity($tint) * $alpha);
  }
}

@function disabled($color, $opacity) {
  $r: red($color);
  $g: green($color);
  $b: blue($color);

  @return rgba($r,$g,$b,$opacity);
}
