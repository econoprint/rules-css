@use "sass:math";
@use "sass:map";
@use "../tokens/system";

// region //////////////////////////////////////////////// Functions

/// Replace `$search` with `$replace` in `$string`
/// @author Kitty Giraudel
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

// region //////////////////////////////////////////////// Browser Targeting

// Targets the Non-Chromium version of Microsoft Edge
// This mixin is unused within this framework, but is available if needed.
@mixin only-edge-html() {
  @supports (-ms-ime-align:auto) {
    @content;
  }
}

// Targets Mozilla Firefox
@mixin only-firefox() {
  @supports (-moz-appearance:meterbar) {
    @content
  }
}

// Targets Internet Explorer & major version, if given.
// @param {String} $version - Major version to target
@mixin only-ie($version: null) {
  html[data-user-agent*="Trident/#{$version}"] {
    @content;
  }
}

// Targets Safari & major version, if given.
// @param {String} $version - Major version to target
@mixin only-safari($version: null) {
  html[data-user-agent*="Version/#{$version}"] {
    @content;
  }
}

// endregion ///////////////////////////////////////////// End Browser Targeting

// region //////////////////////////////////////////////// Feature Targeting

// Target Only Devices with coarse pointers
//
// Works in browsers supporting pointer:coarse OR when using poly-pointer.js
@mixin only-coarse() {
  @media handheld, screen and (pointer: coarse) {
    @content;
  }
}

// Target Only Devices with coarse pointers + Mozilla Firefox on Touch devices
//
// Works in browsers supporting pointer:coarse OR when using poly-pointer.js
@mixin only-touch() {
  @media handheld, screen and (pointer: coarse), screen and (-moz-touch-enabled) {
    @content;
  }
}

// Targets devices with a DPI larger than the given DPI
// @param {Number} $dpi - Minimum DPI to target
@mixin dpi-up($dpi) {
  $ratio: math.div($dpi, 96);
  @media
  only screen and (-webkit-min-device-pixel-ratio: #{$ratio}),
  only screen and (min-device-pixel-ratio: #{$ratio}),
  only screen and (min-resolution: #{$dpi}dpi),
  only screen and (min-resolution: #{$ratio}dppx) {
    @content;
  }
}

// endregion ///////////////////////////////////////////// End Feature Targeting

// region //////////////////////////////////////////////// OS Targeting

// These mixins should be used sparingly. Please target features if possible!

// Targets devices running Android
// REQUIRES RESPONSIVE.JS
@mixin only-android() {
  html[data-user-agent*="Android"] {
    @content;
  }
}

// Targets devices running iOS/iPadOS
@mixin only-ios() {
  @supports (-webkit-touch-callout: none) {
    @content
  }
}

// Targets devices running MacOS
// This attempts to differentiate between iPadOS and macOS using an additional @support rule.
// REQUIRES RESPONSIVE.JS
// @param {String} $version - Major version to target (only works through macOS 10.15)
@mixin only-mac($version: null) {
  @if $version > 10.15 {
    @error "It is not possible to target macOS 11 or greater."
  }

  // Make sure we don't get iPadOS 13+
  @supports not (-webkit-touch-callout: none) {
    // Target macOS
    $version: str-replace($version, ".", "_");
    html[data-user-agent*="Macintosh; Intel Mac OS X #{$version}"] {
      @content;
    }
  }
}

// Targets devices running Windows
// REQUIRES RESPONSIVE.JS
// @param {String} $version - Major version to target (Only works through Windows 10)
@mixin only-windows($version: null) {
  @if $version >= 11 {
    @error "It is not possible to target Windows 11 or greater."
  }

  html[data-user-agent*="Windows NT #{$version}"] {
    @content;
  }
}

// endregion ///////////////////////////////////////////// End OS Targeting

// region //////////////////////////////////////////////// Viewport Targeting

// Wraps the @content in a media query that targets screens between the given min and max width.
// @param {Number} $min - Minimum Width
// @param {Number} $max - Maximum Width
// @param {Boolean} $adjust - Adjust maximum value to slightly less than given.
@mixin viewport-between($min,$max, $adjust: false) {
  @if $max {
    $real-min: if($min, $min, 0);
    $real-max: if($adjust, $max - 0.02, $max);
    /* noinspection CssNonIntegerLengthInPixels */
    @media screen and (min-width: #{$real-min}) and (max-width: #{$real-max}) {
      @content;
    }
  } @else {
    @include viewport-up($min);
  }
}

// Wraps the @content in a media query that targets screens above the given min width.
// @param {Number} $min - Minimum Width
@mixin viewport-up($min) {
  @if $min {
    @media screen and (min-width: #{$min}) {
      @content;
    }
  } @else {
    @content;
  }
}

// Wraps the @content in a media query that targets screens below the given max width.
// @param {Number} $max - Maximum Width
@mixin viewport-down($max, $adjust: false) {
  @if $max {
    $real-max: if($adjust, $max - 0.02, $max);
    /* noinspection CssNonIntegerLengthInPixels */
    @media screen and (max-width: #{$max}) {
      @content;
    }
  } @else {
    @content;
  }
}

// Wraps the given @content in a media query that targets the 'sm' viewport size and above.
// @see system.$screen-sm-min
@mixin sm-up() {
  @include viewport-up(system.$screen-sm-min) {
    @content;
  }
}

// Wraps the given @content in a media query that targets the 'md' viewport size and above.
// @see system.$screen-md-min
@mixin md-up() {
  @include viewport-up(system.$screen-md-min) {
    @content;
  }
}

// Wraps the given @content in a media query that targets the 'lg' viewport size and above.
// @see system.$screen-lg-min
@mixin lg-up() {
  @include viewport-up(system.$screen-lg-min) {
    @content;
  }
}

// Wraps the given @content in a media query that targets the 'xl' viewport size and above.
// @see system.$screen-xl-min
@mixin xl-up() {
  @include viewport-up(system.$screen-xl-min) {
    @content;
  }
}

// Wraps the given @content in a media query that targets the 'sm' viewport size and below.
// @see system.$screen-sm-max
@mixin sm-down() {
  @include viewport-down(system.$screen-sm-max) {
    @content;
  }
}

// Wraps the given @content in a media query that targets the 'md' viewport size and below.
// @see system.$screen-md-max
@mixin md-down() {
  @include viewport-down(system.$screen-md-max) {
    @content;
  }
}

// Wraps the given @content in a media query that targets the 'lg' viewport size and below.
// @see system.$screen-lg-max
@mixin lg-down() {
  @include viewport-down(system.$screen-lg-max) {
    @content;
  }
}

// Wraps the given @content in a media query that targets only the 'xs' viewport.
// @see system.$screen-xs-max
@mixin xs-only() {
  @include viewport-down(system.$screen-xs-max) {
    @content;
  }
}

// Wraps the given @content in a media query that targets only the 'sm' viewport.
// @see system.$screen-sm-max
@mixin sm-only() {
  @include viewport-between(system.$screen-sm-min, system.$screen-sm-max) {
    @content;
  }
}

// Wraps the given @content in a media query that targets only the 'md' viewport.
// @see system.$screen-md-max
@mixin md-only() {
  @include viewport-between(system.$screen-md-min, system.$screen-md-max) {
    @content;
  }
}

// Wraps the given @content in a media query that targets only the 'md' viewport.
// @see system.$screen-md-max
@mixin lg-only() {
  @include viewport-between(system.$screen-lg-min, system.$screen-lg-max) {
    @content;
  }
}

// Wraps the given @content in a media query that targets only the 'xl' viewport.
// @see system.$screen-xl-max
@mixin xl-only() {
  @include viewport-between(system.$screen-xl-min, system.$screen-xl-max) {
    @content;
  }
}

// Wraps the given @content in a media query that targets only the 'xs' viewport.
// @see system.$screen-xs-max
@mixin sm-down-coarse() {
  @include only-coarse {
    @include sm-down {
      @content;
    }
  }
}

// Wraps the given @content in a media query that targets only the 'xs' viewport size, and only
// if the device provides (pointer:coarse), matching most modern touch-only devices.
// @see system.$screen-lg-max
@mixin xs-coarse-only() {
  @include only-coarse {
    @include xs-only {
      @content;
    }
  }
}

// Wraps the given @content in a media query that targets only the 'sm' viewport size, and only
// if the device provides (pointer:coarse), matching most modern touch-only devices.
@mixin sm-coarse-only() {
  @include only-coarse {
    @include sm-only {
      @content;
    }
  }
}

// endregion ///////////////////////////////////////////// End Viewport Targeting