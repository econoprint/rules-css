@use "sass:map";
@use "../tokens/system" as sys;
@use "../modules/palette/palette";
@use "../modules/theme/elevation";

@function vars-pills($context: null) {
  @return (
      "default": (
          "bg": transparent,
          "shadow": none,
          "outline": transparent,
          "text": sys.$theme-on-major,
          "icon": sys.$theme-on-major,
      ),
      "disabled": (
          "bg": palette.disabled(sys.$theme-on-surface, .12),
          "shadow": none,
          "outline": transparent,
          "text": palette.disabled(sys.$theme-on-surface, .38),
          "icon": palette.disabled(sys.$theme-on-surface, .38),
      ),
      "hover": (
          "bg": palette.tint(sys.$theme-on-major, sys.$theme-major, sys.$opacity-hover),
          "shadow": elevation.shadow(1, sys.$theme-shadow),
          "outline": transparent,
          "text": sys.$theme-on-major,
          "icon": sys.$theme-on-major,
      ),
      "focus": (
          "bg": palette.tint(sys.$theme-on-major, sys.$theme-major, sys.$opacity-focus),
          "shadow": none,
          "outline": transparent,
          "text": sys.$theme-on-major,
          "icon": sys.$theme-on-major,
      ),
      "pressed": (
          "bg": palette.tint(sys.$theme-on-major, sys.$theme-major, sys.$opacity-pressed),
          "shadow": none,
          "outline": transparent,
          "text": sys.$theme-on-major,
          "icon": sys.$theme-on-major,
      ),
  );
}

@function vars-filled($context: null) {
  @return (
      "default": (
          "bg": sys.$theme-minor-alt,
          "shadow": none,
          "outline": transparent,
          "text": sys.$theme-on-minor-alt,
          "icon": sys.$theme-on-minor-alt,
      ),
      "disabled": (
          "bg": palette.disabled(sys.$theme-on-surface, .12),
          "shadow": none,
          "outline": null,
          "text": palette.disabled(sys.$theme-on-surface, .38),
          "icon": palette.disabled(sys.$theme-on-surface, .38),
      ),
      "hover": (
          "bg": palette.tint(sys.$theme-on-minor-alt, sys.$theme-minor-alt, sys.$opacity-hover),
          "shadow": elevation.shadow(1, sys.$theme-shadow),
          "outline": transparent,
          "text": null,
          "icon": null,
      ),
      "focus": (
          "bg": palette.tint(sys.$theme-on-minor-alt, sys.$theme-minor-alt, sys.$opacity-focus),
          "shadow": none,
          "outline": null,
          "text": null,
          "icon": null,
      ),
      "pressed": (
          "bg": palette.tint(sys.$theme-minor-alt, sys.$theme-minor-alt, sys.$opacity-pressed),
          "shadow": elevation.shadow(1, sys.$theme-shadow),
          "outline": null,
          "text": null,
          "icon": null,
      ),
  );
}

@function vars-outline($context: null) {
  @return (
      "default": (
          "bg": sys.$theme-surface,
          "shadow": none,
          "outline": sys.$theme-outline,
          "text": sys.$theme-major,
          "icon": sys.$theme-major,
      ),
      "disabled": (
          "bg": palette.disabled(sys.$theme-on-surface, .12),
          "shadow": null,
          "outline": null,
          "text": palette.disabled(sys.$theme-on-surface, .38),
          "icon": palette.disabled(sys.$theme-on-surface, .38),
      ),
      "hover": (
          "bg": palette.tint(sys.$theme-surface, sys.$theme-major, sys.$opacity-hover),
          "shadow": null,
          "outline": null,
          "text": null,
          "icon": null,
      ),
      "focus": (
          "bg": palette.tint(sys.$theme-surface, sys.$theme-major, sys.$opacity-focus),
          "shadow": null,
          "outline": sys.$theme-major,
          "text": null,
          "icon": null,
      ),
      "pressed": (
          "bg": palette.tint(sys.$theme-surface, sys.$theme-major, sys.$opacity-pressed),
          "shadow": null,
          "outline": null,
          "text": null,
          "icon": null,
      ),
  );
}

@function vars-flat($context: null) {
  @return (
      "default": (
          "bg": transparent,
          "shadow": none,
          "outline": transparent,
          "text": var(--pattern-text),
          "icon": var(--pattern-icon),
      ),
      "disabled": (
          "bg": null,
          "shadow": null,
          "outline": null,
          "text": palette.disabled(sys.$theme-on-surface, .38),
          "icon": palette.disabled(sys.$theme-on-surface, .38),
      ),
      "hover": (
          "bg": palette.disabled(sys.$theme-major, sys.$opacity-hover),
          "shadow": null,
          "outline": null,
          "text": null,
          "icon": null,
      ),
      "focus": (
          "bg": palette.disabled(sys.$theme-major, sys.$opacity-hover),
          "shadow": null,
          "outline": null,
          "text": null,
          "icon": null,
      ),
      "pressed": (
          "bg": palette.disabled(sys.$theme-major, sys.$opacity-hover),
          "shadow": null,
          "outline": null,
          "text": null,
          "icon": null,
      ),
  );
}

$elevated: vars-elevated();
$filled: vars-filled();
$tonal: vars-tonal();
$outline: vars-outline();
$flat: vars-flat();

@mixin custom-properties($vars) {

  $btn-bg: map.get($vars,"default","bg");
  $btn-bg-disabled: map.get($vars,"disabled","bg");
  $btn-bg-hover: map.get($vars,"hover","bg");
  $btn-bg-focus: map.get($vars,"focus","bg");
  $btn-bg-pressed: map.get($vars,"pressed","bg");
  $btn-outline: map.get($vars,"default","outline");
  $btn-outline-disabled: map.get($vars,"disabled","outline");
  $btn-outline-hover: map.get($vars,"hover","outline");
  $btn-outline-focus: map.get($vars,"focus","outline");
  $btn-outline-pressed: map.get($vars,"pressed","outline");
  $btn-text: map.get($vars,"default","text");
  $btn-text-disabled: map.get($vars,"disabled","text");
  $btn-text-hover: map.get($vars,"hover","text");
  $btn-text-focus: map.get($vars,"focus","text");
  $btn-text-pressed: map.get($vars,"pressed","text");
  $btn-icon: map.get($vars,"default","icon");
  $btn-icon-disabled: map.get($vars,"disabled","icon");
  $btn-icon-hover: map.get($vars,"hover","icon");
  $btn-icon-focus: map.get($vars,"focus","icon");
  $btn-icon-pressed: map.get($vars,"pressed","icon");
  $btn-shadow: map.get($vars,"default","shadow");
  $btn-shadow-disabled: map.get($vars,"disabled","shadow");
  $btn-shadow-hover: map.get($vars,"hover","shadow");
  $btn-shadow-focus: map.get($vars,"focus","shadow");
  $btn-shadow-pressed: map.get($vars,"pressed","shadow");

  @if $btn-bg { --btn-bg: #{$btn-bg}; }
  @if $btn-outline { --btn-outline: #{$btn-outline}; }
  @if $btn-text { --btn-text: #{$btn-text}; }
  @if $btn-icon { --btn-icon: #{$btn-icon}; }
  @if $btn-shadow { --btn-shadow: #{$btn-shadow}; }
  @if $btn-bg-hover { --btn-bg-hover: #{$btn-bg-hover}; }
  @if $btn-outline-hover { --btn-outline-hover: #{$btn-outline-hover}; }
  @if $btn-text-hover { --btn-text-hover: #{$btn-text-hover}; }
  @if $btn-icon-hover { --btn-icon-hover: #{$btn-icon-hover}; }
  @if $btn-shadow-hover { --btn-shadow-hover: #{$btn-shadow-hover}; }
  @if $btn-bg-focus { --btn-bg-focus: #{$btn-bg-focus}; }
  @if $btn-outline-focus { --btn-outline-focus: #{$btn-outline-focus}; }
  @if $btn-text-focus { --btn-text-focus: #{$btn-text-focus}; }
  @if $btn-icon-focus { --btn-icon-focus: #{$btn-icon-focus}; }
  @if $btn-shadow-focus { --btn-shadow-focus: #{$btn-shadow-focus}; }
  @if $btn-bg-disabled { --btn-bg-disabled: #{$btn-bg-disabled}; }
  @if $btn-outline-disabled { --btn-outline-disabled: #{$btn-outline-disabled}; }
  @if $btn-text-disabled { --btn-text-disabled: #{$btn-text-disabled}; }
  @if $btn-icon-disabled { --btn-icon-disabled: #{$btn-icon-disabled}; }
  @if $btn-shadow-disabled { --btn-shadow-disabled: #{$btn-shadow-disabled}; }
  @if $btn-bg-pressed { --btn-bg-pressed: #{$btn-bg-pressed}; }
  @if $btn-outline-pressed { --btn-outline-pressed: #{$btn-outline-pressed}; }
  @if $btn-text-pressed { --btn-text-pressed: #{$btn-text-pressed}; }
  @if $btn-icon-pressed { --btn-icon-pressed: #{$btn-icon-pressed}; }
  @if $btn-shadow-pressed { --btn-shadow-pressed: #{$btn-shadow-pressed}; }
}

@mixin emit {
  @include custom-properties($elevated);
}

@mixin elevated {
  @include custom-properties($elevated);
}

@mixin filled {
  @include custom-properties($filled);
}

@mixin tonal {
  @include custom-properties($tonal);
}

@mixin outline {
  @include custom-properties($outline)
}

@mixin flat {
  @include custom-properties($flat)
}

@mixin responsive-down($bp) {
  // Customize without repeating rules by creating this mixin
  @if mixin-exists(custom-buttons-responsive-down) {
    //noinspection SassScssUnresolvedMixin
    @include custom-buttons-responsive-down;
  }
}

@mixin responsive-up($bp) {
  // Customize without repeating rules by creating this mixin
  @if mixin-exists(custom-buttons-responsive-up) {
    //noinspection SassScssUnresolvedMixin
    @include custom-buttons-responsive-up;
  }
}

@mixin touch() {
  // Customize without repeating rules by creating this mixin
  @if mixin-exists(custom-buttons-touch) {
    //noinspection SassScssUnresolvedMixin
    @include custom-buttons-touch;
  }
}

@mixin dpi($dpi) {
  // Customize without repeating rules by creating this mixin
  @if mixin-exists(custom-buttons-dpi) {
    //noinspection SassScssUnresolvedMixin
    @include custom-buttons-dpi($dpi);
  }
}

@mixin edge-legacy() {
  // Customize without repeating rules by creating this mixin
  @if mixin-exists(custom-buttons-edge-legacy) {
    //noinspection SassScssUnresolvedMixin
    @include custom-buttons-edge-legacy;
  }
}

@mixin ie() {
  // Customize without repeating rules by creating this mixin
  @if mixin-exists(custom-buttons-ie) {
    //noinspection SassScssUnresolvedMixin
    @include custom-buttons-ie;
  }
}

@mixin firefox() {
  // Customize without repeating rules by creating this mixin
  @if mixin-exists(custom-buttons-firefox) {
    //noinspection SassScssUnresolvedMixin
    @include custom-buttons-firefox;
  }
}

@mixin safari() {
  // Customize without repeating rules by creating this mixin
  @if mixin-exists(custom-buttons-safari) {
    //noinspection SassScssUnresolvedMixin
    @include custom-buttons-safari;
  }
}